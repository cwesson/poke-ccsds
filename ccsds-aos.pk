/**
 * @file ccsds-aos.pk
 * @author Conlan Wesson
 * Poke support for CCSDS AOS Space Data Link Protocol (CCSDS 732.0-B-4).
 *
 * @ingroup ccsds
 * @defgroup aos CCSDS AOS Space Data Link Protocol
 * @{
 */

load "ccsds-clcw.pk";

/// User-defined AOS Frame Header Error Control presence. (4.1.2.6.2)
var aos_fhec_present = 0T;
/// User-defined AOS Insert Zone length. (4.1.3.2 and 4.1.3.4.1)
var aos_insert_zone_length = 0#B;
/// User-defined AOS Transfer Frame length. (4.1.1.2)
var aos_frame_length = 1024#B;
/// User-defined AOS Frame Error Control Field presence. (4.1.6.1.2)
var aos_fecf_present = 0T;
/// User-defined AOS Operational Control Field presence for each virtual channel. (4.1.5.2)
var aos_ocf_present = [
  0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T,
  0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T,
  0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T,
  0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T, 0T];

/// AOS Verion 2 (4.1.2.2.2.2)
var AOS_VERSION_2 = 0b01;
/// AOS Only Idle Data Virtual Channel (4.1.2.3.2 1)
var AOS_VCID_OID = 0b111111;

/**
 * AOS Transfer Frame Primary Header
 */
type AOS_Frame_Primary_Header =
  struct
  {
    uint<2> version = AOS_VERSION_2;
    uint<8> scid;
    uint<6> vcid;
    uint<24> count;
    uint<1> replay_flag;
    uint<1> count_usage;
    uint<2> spare = 0;  // (4.1.2.5.4.2)
    uint<4> count_cycle : (count_usage == 1T) || (count_cycle == 0); // (4.1.2.5.5.3)

    // Master Channel Identifier (2.1.3)
    computed uint<10> mcid;
    method get_mcid = uint<10>:
    {
      return version:::scid;
    }
    method set_mcid = (uint<10> id) void:
    {
      version = id .>> 8;
      scid = id & 0xFF;
    }

    // Global Virtual Channel Identifier (2.1.3)
    computed uint<16> gvcid;
    method get_gvcid = uint<16>:
    {
      return version:::scid:::vcid;
    }
    method set_gvcid = (uint<16> id) void:
    {
      version = id .>> 14;
      scid = (id .>> 6) & 0xFF;
      vcid = id & 0x3F;
    }

    /**
    * Pretty printer.
    */
    method _print = void:
    {
      print ("#<\n");
      printf ("  %<struct-field-name:Primary Header%>:\n");
      printf ("    %<struct-field-name:Version%>: %<integer:%u2d%>\n", version+1);
      printf ("    %<struct-field-name:Spacecraft ID%>: %<integer:0x%u8x%>\n", scid);
      printf ("    %<struct-field-name:Virtual Channel ID%>: ");
      if (vcid == AOS_VCID_OID)
        print ("Idle\n");
      else
        printf ("%<integer:0x%u6x%>\n", vcid);
      printf ("    %<struct-field-name:Frame Count%>: %<integer:%u28d%>\n", count_cycle:::count);
      printf ("    %<struct-field-name:Replay Flag%>: %s\n", replay_flag ? "Yes" : "No");
      print (">\n");
    }
  };

assert(1#AOS_Frame_Primary_Header == 6#B);

/**
 * AOS M_PDU Header
 */
type AOS_M_PDU_Header =
  struct
  {
    uint<5> spare = 0;  // (4.1.4.2.2.2)
    uint<11> first_hdr_ptr;
  };

assert(1#AOS_M_PDU_Header == 2#B);

/**
 * AOS P_PDU Header
 */
type AOS_B_PDU_Header =
  struct
  {
    uint<2> spare = 0;  // (4.1.4.3.2.2)
    uint<14> data_ptr;
  };

assert(1#AOS_B_PDU_Header == 2#B);

/**
 * AOS Transfer Frame
 */
type AOS_Frame =
  struct
  {
    AOS_Frame_Primary_Header header;

    if (aos_fhec_present)
      uint<16> fhec;

    // Insert Zone
    var insert_zone_offset = OFFSET;
    byte[0] @ insert_zone_offset + aos_insert_zone_length;

    // Data Field
    var data_offset = OFFSET;
    var data_length = (aos_frame_length - 1#AOS_Frame_Primary_Header)
                    + (aos_fhec_present ? -2#B : 0#B)
                    + (-aos_insert_zone_length)
                    + (aos_fecf_present ? -2#B : 0#B)
                    + (aos_ocf_present[header.vcid] ? -4#B : 0#B);
    byte[0] @ data_offset + data_length;

    if (aos_ocf_present[header.vcid])
      union {
        CLCW clcw;

        struct {
          uint<1> type_flag : type_flag == 1;
          uint<1> report_use;
          uint<30> data;
        } type2;
      } ocf;

    if (aos_fecf_present)
      uint<16> fecf;

    /**
     * Get the data field.
     * @return Array containing the data field.
     */
    method get_data = byte[]:
    {
      return byte[data_length] @ data_offset;
    }

    /**
     * Get the insert zone field.
     * @return Array containing the insert zone field.
     */
    method get_insert_zone = byte[]:
    {
      return byte[aos_insert_zone_length] @ insert_zone_offset;
    }
  };

/** @} */ // defgroup aos
